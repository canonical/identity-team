name: CVEs check and prioritization
on:
  workflow_call:
    inputs:
      labels:
        description: Labels to apply, string formatted as a comma separated list
        required: false
        default: 'bug'
        type: string
      issue:
        description: Issue ID used to inspect and edit
        required: false
        default: null
        type: string
      author:
        description: Github ID of the CVE user
        required: false
        default: ROCKsBot
        type: string


permissions:
    contents: write
    issues: write

jobs:
  cve-labelling:
    runs-on: ubuntu-24.04
    steps:
      - run: echo issue=${{ inputs.issue }} >> $GITHUB_ENV
        if: ${{ inputs.issue }}
      - run: echo issue=${{ github.event.issue }} >> $GITHUB_ENV
        if: ${{ github.event.issue.id }}
      - name: Inspect issue author
        id: author-id
        run: echo author=$(gh issue view ${{ env.issue }} --json author -q '.author.login') >> $GITHUB_OUTPUT
        env:
          GH_PAGER:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
      - id: issue-id
        run: echo issue=${{ env.issue }} >> $GITHUB_OUTPUT
      - name: Apply labels
        if: ${{ steps.author-id.outputs.author == inputs.author }}
        run: gh issue edit ${{ env.issue }} --add-label '${{ inputs.labels }}'
        env:
            GH_PAGER:
            GH_TOKEN: ${{ github.token }}
            GH_REPO: ${{ github.repository }}
      - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        if: ${{ success() }}
        with:
            github-token: ${{ github.token }}
            script: |
                // 1. Retrieve existing bot comments for the PR
                const { data: comments } = await github.rest.issues.listComments({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: ${{ steps.issue-id.outputs.issue }},
                })
                const botComment = comments.find(comment => {
                    return comment.user.type === 'Bot' && comment.body.includes('CVE issue checker')
                })

                // 2. Prepare format of the comment
                const output = `#### CVE issue checker #### \n
                <details>
                Applied labels: ${{ inputs.labels }} \n\n
                *Workflow: \`${{ github.workflow }}\`*
                </details>`;

                // 3. If we have a comment, update it, otherwise create a new one
                if (botComment) {
                    github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: botComment.id,
                    body: output
                    })
                } else {
                    github.rest.issues.createComment({
                    issue_number: ${{ steps.issue-id.outputs.issue }},
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: output
                    })
                }
